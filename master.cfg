# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
	# worker.Worker("localworker", "pass", properties={"os":"Debian Buster"}, keepalive_interval=300),
	worker.LocalWorker('bot1'),
    	worker.LocalWorker('bot2'),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
# c['change_source'].append(changes.github.GitHubPullrequestPoller('git://github.com/andreasofthings/apc.git', pollInterval=599))
# c['change_source'].append(changes.GitPoller(
#       'git://github.com/buildbot/hello-world.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollInterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
hourly = schedulers.Periodic(
	name="hourly", 
	builderNames=["documentation"], 
	periodicBuildTimer=60*60
)
c['schedulers'].append(hourly)
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='main'),
                            treeStableTimer=None,
                            builderNames=["deploy"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["deploy"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

apc = 'git@github.com:andreasofthings/apc.git'
fetchapc = steps.Git(repourl=apc, mode='incremental')
factory = util.BuildFactory()
# check out the source
factory.addStep(fetchapc)
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.PyFlakes(command=["pyflakes", "webapp"]))
factory.addStep(steps.PyLint(command=["pylint", "webapp"]))
# factory.addStep(steps.ShellCommand(command=["gcloud", "app", "deploy"])) # , env={"PYTHONPATH": "."}))

doc_factory = util.BuildFactory()
doc_factory.addStep(fetchapc)
doc_factory.addStep(steps.Sphinx(sphinx_sourcedir="docs/source", sphinx_builddir="docs/build"))
doc_factory.addStep(steps.ShellCommand(command=["gsutil", "cp", ]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="deploy",
      workernames=["bot1", "bot2"],
      factory=factory))

c['builders'].append(
    util.BuilderConfig(name="documentation",
      workernames=["bot1", "bot2"],
      factory=doc_factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []
c['buildbotNetUsageData'] = 'full'

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "ci/cd"
c['titleURL'] = "https://www.pramari.de"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://build.pramari.de/"

authz = util.Authz(
  allowRules=[
    util.AnyControlEndpointMatcher(role="admins", defaultDeny=True),
    util.AnyEndpointMatcher(role="admins", defaultDeny=True),
  ],
  roleMatchers=[
    util.RolesFromEmails(admins=["andreas@neumeier.org"])
  ]
)
c['www'] = dict(
	port=8010,
        plugins=dict(waterfall_view={}, console_view={}, grid_view={}, badges={}),
	auth=util.GoogleAuth("82960315302-tbj0fvm03aviuah0ps66991qhjrtopak.apps.googleusercontent.com", "eVsvW5FkUKU65JJj8ksz26fX"),
	change_hook_dialects={'github': {'secret': 'BRbNFGkfC$os9W)3mXCYer>vf2,j;w2MYfzNRRdMz{HGVa6zbaoPi6fb6Fs?EEpw'}},
	authz=authz
)

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}
